Goal for Tuesday
----------------

Finish the foo Content Type, and fit it into a generator. This includes rendering and paths, etc..


for content creation proxying ...

the content type should name itself:

acts_as_content 'Inkling Page'

The parameter appears in the drop down.

The Inkling::Page class name is split down into inkling_page then, for content creation, it redirects to new_admin_inkling_page_path(..)

The content developer must supply these routes.


* Dev. Notes


TODO
----

Inkling stories

1. as a dev I have provided content type recognition
1a. once prototyped, create class methods for models to become content - e.g acts_as_content

2. As a dev I have provided CRUD permissioning which is stored by roles on folders.
2a. As a dev I have CRUD for folders

3. As a dev I have provided a user & community/group & role API.
4. As a dev I have provided a clean & popular authentication layer.
5. As a dev I have provided a simple API for workflow, which may be extended, but will initially be draft/publish and role restricted.
6. As a dev I can create a content extension, which groups content types, and have it recognized in the system. (this can wait until you
have basic CMS functionality with inkling-content).
7. As a dev I have CRUD for the site object's informative properties.
7a. As a dev I have multi-site capabilities
7b. As a dev I have worked out how to add parameters to the Application object which can be looked up in routes.rb (to turn multi-site on or off).

8. As a dev I have planned for a themeable layer, possibly the admin UI.



Inkling-Content (currently Inkling page)
1. As a dev I have created a polished page type with ckeditor for WYSIWYG.


Outstanding Issues
------------------

* Engine generator isn't being hooked into initialization process for generating migrations. Check on this.
* validator on folder_entry to ensure that only folders can be nested
* copying static assets - css, images - into the hosting application with a generator.

Security
--------
Roles - guest, member, admin. (roles can be made)

Each Folder has CRUD assignments to roles - so R for guest, member, admin, is accessible content for everyone. If it's D
for admins, only admins can delete what is in that folder. These rules define all access across the application, at the
front and the back cms admin area (e.g. if a content editor role is invented, and a content editor wants to edit a page
in the CMS admin, only pages in folders with RU will be presented in the controller).


Workflow
--------

In the first draft, forget it. Just hack a visible, invisible boolean, which you'll drop as soon as you have security working
(when you can turn to workflow).

Workflows will be content specific, i.e.

Plan is to have a proper workflow.

workflows [:name, :id] -> workflow_states [:name, :position(list)] -> workflow_roles [:role_id, :position (list)]
workflow_assignments [:workflow_id, :content_id]

Each workflow_state, in order, must be progressed, in order, by each workflow_role. Workflows are applied to folders.

Site
----
Multi-site functionality will wrap everything.

A site:

sites[:name, :path, :description, :user_id],
site_users [:site_id, :user_id], site_groups[:site_id, group_id], site_roles[:site_id, role_id]

Roles, users, and groups will be universal, but will be configured to have site access. So you can reuse them across sites.



Theming
-------

Theming is three things, (1) the location of layouts and views and (2) the information architecture of content blocks, (3)
CSS.

(1) - look into load paths for views. Mephisto did this. Rails 3 will make it easier.
(2) - prototype via scaffold or a rough view for the moment. When you have admin functionality mapped, clean up
with neat grouping of menus/partial rendering, etc., document, and it should be themable, in theory.
(3) - Simply use clear classes, etc.?
